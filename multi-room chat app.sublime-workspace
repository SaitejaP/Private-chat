{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pa",
				"patnerId"
			],
			[
				"so",
				"socket"
			],
			[
				"join",
				"joinRoom"
			],
			[
				"r",
				"rString"
			],
			[
				"soc",
				"socketId"
			],
			[
				"joi",
				"joinRoom"
			],
			[
				"has",
				"hasOwnProperty"
			],
			[
				"co",
				"connection"
			],
			[
				"ni",
				"nickname"
			],
			[
				"in",
				"indexOf"
			],
			[
				"si",
				"socketId"
			],
			[
				"o",
				"on"
			],
			[
				"t",
				"text"
			],
			[
				"ro",
				"room"
			],
			[
				"fi",
				"function"
			],
			[
				"sock",
				"socket"
			],
			[
				"ti",
				"timestamp"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"s",
				"size"
			],
			[
				"on",
				"onlineUsersId"
			],
			[
				"le",
				"length-1"
			],
			[
				"li",
				"list"
			],
			[
				"di",
				"divSystemContentElement"
			],
			[
				"room",
				"room-list"
			],
			[
				"O",
				"onlineUsersArr"
			],
			[
				"usr",
				"usersInRoom"
			],
			[
				"us",
				"usersInRoomSummary"
			],
			[
				"user",
				"User"
			],
			[
				"nickna",
				"nickname"
			],
			[
				"S",
				"Schema"
			],
			[
				"Us",
				"UserInTheRoom"
			],
			[
				"re",
				"res"
			],
			[
				"su",
				"usersInRoomSummary"
			],
			[
				"use",
				"usersInRoom"
			],
			[
				"i",
				"id"
			],
			[
				"roo",
				"room"
			],
			[
				"ser",
				"seriesName"
			],
			[
				"con",
				"console"
			],
			[
				"add",
				"addForm"
			],
			[
				"res",
				"res"
			],
			[
				"e",
				"err"
			],
			[
				"err",
				"err"
			],
			[
				"episod",
				"episodeName"
			],
			[
				"episode",
				"episodeNumber"
			],
			[
				"series",
				"seriesId"
			],
			[
				"seri",
				"seriesId"
			],
			[
				"sh",
				"showName"
			],
			[
				"par",
				"parseString"
			],
			[
				"airs",
				"airsTime"
			],
			[
				"air",
				"airsDayOfWeek"
			],
			[
				"nam",
				"seriesName"
			],
			[
				"net",
				"next"
			],
			[
				"api",
				"apiKey"
			],
			[
				"lo",
				"log"
			],
			[
				"Sho",
				"Show"
			],
			[
				"ap",
				"api"
			],
			[
				"ne",
				"next"
			],
			[
				"fun",
				"function"
			],
			[
				"g",
				"gulp"
			],
			[
				"angular",
				"angular-strap"
			],
			[
				"m",
				"meta"
			],
			[
				"b",
				"body	Tag"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "var socketio = require(\"socket.io\");\nvar _ = require(\"underscore\");\nvar io;\nvar guestNumber = 1;\nvar nicknames = {};\nvar namesUsed = {};\nvar currentRoom = {};\n\nexports.listen = function(server){\n	io = socketio(server);\n	io.set('log level', 1);\n\n	io.on('connection', function(socket){\n		guestNumber = assignGuestName(socket);\n		socket.join('lobby');\n		handleMessageUnicasting(socket);\n		handleClientDisconnection(socket);\n\n		setInterval(function(){\n			var onlineUsersId = io.nsps['/'].connected;\n			var size = Object.size(onlineUsersId);\n			var onlineUsers = \"\";\n			if(size > 1){\n				for (var socketId in onlineUsersId) {\n					if (socketId != socket.id)\n		    		onlineUsers += (nicknames[socketId].toString() + \" \");\n				}\n				onlineUsers = onlineUsers.substring(0,onlineUsers.length-1)\n			}\n			socket.emit('onlineUsers', onlineUsers);\n		}, 1000);\n	});\n}\n\nfunction assignGuestName(socket){\n	var name = 'Guest' + guestNumber;\n	nicknames[socket.id] = name;\n	socket.emit('nameResult', {\n		success: true,\n		name: name\n	});\n	namesUsed[name] = socket.id;\n	return guestNumber + 1;\n}\n\nfunction handleMessageUnicasting(socket) {\n	socket.on('message', function(message) {\n		var patnerId = namesUsed[message.patnerName]\n	console.log(\"message recieved\");\n	console.log('patner id = '+patnerId);\n\n		socket.emit(nicknames[patnerId], {\n			text: message.text,\n			from: nicknames[socket.id],\n			timeStamp: message.timeStamp\n		});\n	});\n}\n\nfunction handleClientDisconnection(socket) {\n	socket.on('disconnect', function() {\n		var name = nicknames[socket.id];\n		delete namesUsed[name];\n		delete nicknames[socket.id];\n	});\n}\n\nObject.size = function(Obj){\n	var size = 0, key;\n	for(key in Obj){\n		if(Obj.hasOwnProperty(key))\n			size++;\n	}\n	return size;\n}",
			"file": "lib/chat_server.js",
			"file_size": 1806,
			"file_write_time": 130567939364709012,
			"settings":
			{
				"buffer_size": 1728,
				"line_ending": "Windows"
			}
		},
		{
			"file": "lib/app.js",
			"settings":
			{
				"buffer_size": 677,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n	var UserInTheRoom = io.nsps['/'].adapter.rooms[room],\n	for(var id in UserInTheRoom){\n		to = nicknames[socketId].toString();\n		break;\n	}\n	\n	namesUsed.push(name);\n	user = new User({\n		_id: socket.id,\n		name: name,\n		to: to,\n		message: \n	})\n\n\n		var usersInRoomSummary = \"Users in this room: \"\n	var usersInRoom = io.nsps['/'].adapter.rooms[room];\n		for (var socketId in usersInRoom) {\n    		usersInRoomSummary += (nicknames[socketId].toString() + \" \");\n		}\n\n		console.log(usersInRoomSummary);\n\n		socket.emit('message', {text: usersInRoomSummary});\n\n\nio.nsps['/'].adapter.rooms[room] // clients connected to room\nio.nsps['/'].connected  //all clients connected to socket.io\nio.sockets.adapter.rooms  //all rooms\n\n\nMyModel.update({@1 name: 'Tobi' }, {@2 ferret: true }, {@3 multi: true }, function @4(err, numberAffected, raw) {\n  if (err) return handleError(err);\n  console.log('The number of updated documents was %d', numberAffected);\n  console.log('The raw response from Mongo was ', raw);\n}); \n\n\n@1 - CONDITIONS\n@2 - UPDATE\n@3 - OPTOPNS {safe, UPSERT, MULTI, STRICT, OVERWITE}\n@4 - ERR, count of updated documents Mongo reported, full response from Mongo\n\n\nvar patners = io.nsps[a].adapter.rooms['lobby'];\n		for(var socketId in patners){\n			if(socket.id != socketId){\n			var patner = {\n				nickname: nicknames[socketId].toString(),\n				socketId: socketId };\n			break;\n			}\n		}\n\nfunction randomString(length) {\n	var StrWallet =  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var result = '';\n    for (var i = length; i > 0; --i) result += StrWallet[Math.round(Math.random() * (StrWallet.length - 1))];\n    return result;\n}\n\nsocket.leave(currentRoom[socket.id]);\n\n\nvar userSchema = new mongoose.Schema({\n	id: String,\n	name: String,\n	to: [{\n		name: String,\n		message: [{\n			content: String,\n			timestamp: Date\n		}]\n	}]\n});\n\nvar User = mongoose.model(' User', userSchema);\nmongoose.connect('localhost:27017', function(){\n	console.log('mongoose connected');\n});\n\n		var patners = io.nsps['/'].adapter.rooms['lobby'];\n		for(var socketId in patners){\n			if(socket.id != socketId){\n			var patner = {\n				nickname: nicknames[socketId].toString(),\n				socketId: socketId };\n			break;\n			}\n		}\n\n\nObject.size = function(Obj){\n	var size = 0, key;\n	for(key in Obj){\n		if(Obj.hasOwnProperty(key))\n			size++;\n	}\n	return size;\n}\n\n		setInterval(function(){\n			var onlineUsersId = io.nsps['/'].connected;\n			var size = Object.size(onlineUsersId);\n			var onlineUsers = \"\";\n			if(size > 1){\n				for (var socketId in onlineUsersId) {\n					if (socketId != socket.id)\n		    		onlineUsers += (nicknames[socketId].toString() + \" \");\n				}\n				onlineUsers = onlineUsers.substring(0,onlineUsers.length-1)\n			}\n			socket.emit('onlineUsers', onlineUsers);\n		}, 1000);\n	});\n\n",
			"settings":
			{
				"buffer_size": 2768,
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/scripts/chat.js",
			"settings":
			{
				"buffer_size": 851,
				"line_ending": "Windows"
			}
		},
		{
			"file": "public/index.html",
			"settings":
			{
				"buffer_size": 1058,
				"line_ending": "Windows"
			}
		},
		{
			"file": "public/scripts/chat_ui.js",
			"settings":
			{
				"buffer_size": 2100,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/saiteja/Repo/Production/NodeJS/Projects/multi-room chat app",
		"/media/saiteja/Repo/Production/NodeJS/Projects/multi-room chat app/lib"
	],
	"file_history":
	[
		"/home/saiteja/Documents/AngularJs/showTracker/server.js",
		"/media/saiteja/Repo/Production/NodeJS/Projects/multi-room chat app/server.js",
		"/media/saiteja/Repo/Production/NodeJS/Projects/multi-room chat app/package.json",
		"/media/saiteja/Repo/Production/NodeJS/Projects/multi-room chat app/generator/app.js",
		"/home/saiteja/Untitled Document",
		"/home/saiteja/Untitled",
		"/home/saiteja/Documents/scissors/test.js",
		"/home/saiteja/Documents/AngularJs/showTracker/package.json",
		"/home/saiteja/Documents/AngularJs/showTracker/gulpfile.js",
		"/home/saiteja/Documents/Create a TV Show Tracker using AngularJS, Node.js and MongoDB.html",
		"/home/saiteja/Documents/AngularJs/showTracker/public/vendor/moment.js",
		"/home/saiteja/Documents/AngularJs/showTracker/public/stylesheets/style.scss",
		"/home/saiteja/Desktop/iframe",
		"/home/saiteja/Desktop/mini-project/public/js/script.js",
		"/home/saiteja/Documents/pdfjs/package.json",
		"/home/saiteja/Desktop/360Viewer-master/public/index.html",
		"/home/saiteja/Documents/scissors/test.",
		"/home/saiteja/Documents/scissors/app.js",
		"/home/saiteja/Documents/app.js",
		"/home/saiteja/Documents/AngularJs/gce/manifest.txt",
		"/home/saiteja/Documents/AngularJs/showTracker/public/index.html",
		"/home/saiteja/Documents/AngularJs/showTracker/public/controllers/add.js",
		"/home/saiteja/Documents/AngularJs/showTracker/public/views/detail.html",
		"/home/saiteja/Documents/AngularJs/showTracker/public/app.js",
		"/home/saiteja/Documents/AngularJs/showTracker/public/views/home.html",
		"/home/saiteja/Documents/AngularJs/showTracker/public/main.js",
		"/home/saiteja/Documents/AngularJs/showTracker/public/views/add.html",
		"/home/saiteja/Documents/AngularJs/showTracker/public/services/show.js",
		"/home/saiteja/Documents/AngularJs/showTracker/node_modules/jade/node_modules/constantinople/node_modules/uglify-js/node_modules/async/README.md",
		"/home/saiteja/Documents/AngularJs/showTracker/node_modules/jade/node_modules/with/node_modules/uglify-js/node_modules/async/README.md",
		"/home/saiteja/Documents/AngularJs/showTracker/public/show.js",
		"/home/saiteja/Documents/AngularJs/showTracker/public/viewa/home.html",
		"/home/saiteja/Documents/AngularJs/showTracker/app.js",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/public/index.html",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/public/app.js",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/server.js",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/gulpfile.js",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/public/stylesheets/style.scss",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/public/stylesheets/Link to style.css",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/public/vendor/angular-strap.js",
		"/home/saiteja/Documents/AngularJs/Integrated/showTracker/app.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"processUserInput",
			"click",
			"curr",
			"size",
			"curr",
			"current",
			"wallet",
			"click",
			"leave",
			"join",
			"current",
			"handleRoomJoining",
			", room",
			"patner",
			"room",
			"join",
			"room.newRoom",
			"handleRoomJoining(",
			"handleRoomJoining(socket,",
			"handleRoomJoining(socket, socket)",
			"join",
			"patner",
			"get",
			"patner",
			".join",
			"push",
			"change",
			"joinRoom",
			"save",
			"' ",
			"error",
			"err",
			"not",
			"nick",
			"user not",
			"handle",
			"send",
			"'message'",
			"save",
			"handleMessageBroadcasting",
			"patner",
			"user",
			"emit('message",
			"message",
			"schema",
			"sendMessage",
			"val",
			"join",
			"io.",
			"io.'",
			"nickname",
			"process",
			"consol",
			"console.log",
			"size",
			"jque",
			"Sch",
			"conn",
			"id",
			"nicknames",
			"names",
			"namesU",
			"render",
			"view",
			"join",
			"handleRoomJoi",
			"join",
			"emit",
			"join",
			"console",
			"adapter",
			"mana",
			"broad",
			"io.sockets.on",
			"broad",
			"delete",
			"for",
			"delet",
			"for",
			"require('socket",
			"message'",
			"room change",
			"is ",
			"io.socket.manager",
			"io.socket.",
			"room",
			"rooms",
			"io",
			"function handleRoomJoining(socket){\n	socket.on('join', function(room){\n		socket.leave(currentRoom[socket.id]);\n		joinRoom(socket, room.newRoom);\n	});\n}",
			"function handleRoomJoining(socket) {\n	socket.on('join', function(room){\n		socket.leave(currentRoom[socket.id]);\n		joinRoom(socket, room.newRoom);\n	});\n}",
			"function handleRoomJoining(socket){\n	socket.on('join', function(room){\n		socket.leave(currentRoom[socket.id]);\n		joinRoom(socket, room.newRoom);\n	});\n}",
			"function handleRoomJoining(socket){\n	socket.on('join', function(room){\n		socket.leave(currentRoom[socket.id]);\n		joinRoom(socket, room.newRoom);\n	});\n}\n",
			"console",
			"TV show has been added",
			"added",
			"already",
			"filterByGenre",
			"app.get('*', function(req, res) {\n  res.redirect('/#' + req.originalUrl);\n});",
			"app.post('/api/shows', function (req, res, next){",
			"post",
			"fromnow",
			"error",
			"err",
			"userSchema.pre('save', function(next) {\n  var user = this;\n  if (!user.isModified('password')) return next();\n  bcrypt.genSalt(10, function(err, salt) {\n    if (err) return next(err);\n    bcrypt.hash(user.password, salt, function(err, hash) {\n      if (err) return next(er",
			"userSchema.pre('save', function(next) {\n  var user = this;\n  if (!user.isModified('password')) return next();\n  bcrypt.genSalt(10, function(err, salt) {\n    if (err) return next(err);\n    bcrypt.hash(user.password, salt, function(err, hash) {\n      if (err) return next(err);\n      user.password = hash;\n      next();\n    });\n  });\n});",
			"app.post",
			"save",
			"seriesName",
			"type=\"text/javascript\" ",
			"scr=\"vendor",
			"scr"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"StrWallet",
			"io.on",
			"io.sockets.",
			"",
			"fromNow",
			"",
			"src=\"vendor",
			"src"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/chat_server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1728,
						"regions":
						{
						},
						"selection":
						[
							[
								422,
								851
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 187.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 677,
						"regions":
						{
						},
						"selection":
						[
							[
								258,
								258
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2768,
						"regions":
						{
						},
						"selection":
						[
							[
								2766,
								2766
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1404.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "public/scripts/chat.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 851,
						"regions":
						{
						},
						"selection":
						[
							[
								228,
								228
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "public/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1058,
						"regions":
						{
						},
						"selection":
						[
							[
								609,
								609
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "public/scripts/chat_ui.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2100,
						"regions":
						{
						},
						"selection":
						[
							[
								1797,
								1797
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 740.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 112.0
	},
	"project": "multi-room chat app.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 186.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
